#Stage 1: Build the react application
FROM node:alpine as build
# Configure the main working directory inside the docker image from which the app will be running from.
# This is the base directory used in any further RUN, COPY, and ENTRYPOINT commands.
WORKDIR /app
# Copy the package.json as well as the package-lock.json(yarn.lock)
COPY package.json  yarn.lock ./
# Install the dependencies. This is a separate step so the dependencies
# will be cached unless changes to one of those two files are made.
RUN yarn install
## Copy the main application
COPY . .
# add the node_modules folder to $PATH
ENV PATH /app/node_modules/.bin:$PATH

# Arguments
#ARG REACT_APP_API_BASE_URL
#ENV REACT_APP_API_BASE_URL=${REACT_APP_API_BASE_URL}

# Build the application
RUN yarn build


# Stage 2: Set up production environment. The base image for this is an alpine based Nginx image.
FROM nginx:alpine
# Copy the react build folder from Stage 1 to the root of nginx (www)
#COPY --from=build /app/build /var/www
COPY --from=build /app/build /usr/share/nginx/html
# --------- only for those using react router ----------
# If you are using react router
# you need to overwrite the default nginx configurations
# Remove default nginx configuration file

#RUN rm /etc/nginx/conf.d/default.conf
## Copy our custom one
#COPY /nginx/nginx.conf /etc/nginx/conf.d


# Copy our custom one
COPY nginx.conf /etc/nginx/conf.d/default.conf

# --------- /only for those using react router ----------
# Expose port 80 to the outer world, so we can access it from the outside.
EXPOSE 80
# start nginx
CMD ["nginx", "-g", "daemon off;"]